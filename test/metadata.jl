@testset "Metadata" begin
    sample_text1 = "This is a string"
    sample_text2 = "This is also a string"

    sd1 = StringDocument(sample_text1)
    sd2 = StringDocument(sample_text2)
    crps = Corpus([sd1, sd2])

    # Single document metadata getters
    @test isequal(StringAnalysis.name(sd1), "")
    @test isequal(StringAnalysis.language(sd1), Languages.English())
    @test isequal(StringAnalysis.author(sd1), "")
    @test isequal(StringAnalysis.timestamp(sd1), "")
    @test isequal(StringAnalysis.id(sd1), "")
    @test isequal(StringAnalysis.publisher(sd1), "")
    @test isequal(StringAnalysis.published_year(sd1), "")
    @test isequal(StringAnalysis.edition_year(sd1), "")
    @test isequal(StringAnalysis.documenttype(sd1), "")
    @test isequal(StringAnalysis.note(sd1), "")

    # Single document metadata setters
    StringAnalysis.name!(sd1, "Document")
    StringAnalysis.language!(sd1, Languages.German())
    StringAnalysis.author!(sd1, "Author")
    StringAnalysis.timestamp!(sd1, "Time")
    StringAnalysis.id!(sd1, "ID")
    StringAnalysis.publisher!(sd1, "Publisher")
    StringAnalysis.published_year!(sd1, "Publishing Year")
    StringAnalysis.edition_year!(sd1, "Edition Year")
    StringAnalysis.documenttype!(sd1, "Type")
    StringAnalysis.note!(sd1, "A Note")

    @test isequal(StringAnalysis.name(sd1), "Document")
    @test isequal(StringAnalysis.language(sd1), Languages.German())
    @test isequal(StringAnalysis.author(sd1), "Author")
    @test isequal(StringAnalysis.timestamp(sd1), "Time")
    @test isequal(StringAnalysis.id(sd1), "ID")
    @test isequal(StringAnalysis.publisher(sd1), "Publisher")
    @test isequal(StringAnalysis.published_year(sd1), "Publishing Year")
    @test isequal(StringAnalysis.edition_year(sd1), "Edition Year")
    @test isequal(StringAnalysis.documenttype(sd1), "Type")
    @test isequal(StringAnalysis.note(sd1), "A Note")

    # Metadata getters for an entire corpus
    @test isequal(StringAnalysis.names(crps), ["Document", ""])
    @test isequal(StringAnalysis.languages(crps), [Languages.German(), Languages.English()])
    @test isequal(StringAnalysis.authors(crps), ["Author", ""])
    @test isequal(StringAnalysis.timestamps(crps), ["Time", ""])
    @test isequal(StringAnalysis.ids(crps), ["ID", ""])
    @test isequal(StringAnalysis.publishers(crps), ["Publisher", ""])
    @test isequal(StringAnalysis.published_years(crps), ["Publishing Year", ""])
    @test isequal(StringAnalysis.edition_years(crps), ["Edition Year", ""])
    @test isequal(StringAnalysis.documenttypes(crps), ["Type", ""])
    @test isequal(StringAnalysis.notes(crps), ["A Note", ""])

    # Metadata setters for an entire corpus
    StringAnalysis.names!(crps, "Document")
    StringAnalysis.languages!(crps, Languages.Spanish())
    StringAnalysis.authors!(crps, "Author")
    StringAnalysis.timestamps!(crps, "Time")
    StringAnalysis.ids!(crps, "ID")
    StringAnalysis.publishers!(crps, "Publisher")
    StringAnalysis.published_years!(crps, "Publishing Year")
    StringAnalysis.edition_years!(crps, "Edition Year")
    StringAnalysis.documenttypes!(crps, "Type")
    StringAnalysis.notes!(crps, "A Note")
    @test isequal(StringAnalysis.names(crps), ["Document", "Document"])
    @test isequal(StringAnalysis.languages(crps), [Languages.Spanish(), Languages.Spanish()])
    @test isequal(StringAnalysis.authors(crps), ["Author", "Author"])
    @test isequal(StringAnalysis.timestamps(crps), ["Time", "Time"])
    @test isequal(StringAnalysis.ids(crps), ["ID", "ID"])
    @test isequal(StringAnalysis.publishers(crps), ["Publisher", "Publisher"])
    @test isequal(StringAnalysis.published_years(crps), ["Publishing Year", "Publishing Year"])
    @test isequal(StringAnalysis.edition_years(crps), ["Edition Year", "Edition Year"])
    @test isequal(StringAnalysis.documenttypes(crps), ["Type", "Type"])
    @test isequal(StringAnalysis.notes(crps), ["A Note", "A Note"])

    StringAnalysis.names!(crps, ["Unnamed Document", "Unnamed Document"])
    StringAnalysis.languages!(crps, [Languages.English(), Languages.English()])
    StringAnalysis.authors!(crps, ["Unknown Author", "Unknown Author"])
    StringAnalysis.timestamps!(crps, ["Unknown Time", "Unknown Time"])
    StringAnalysis.ids!(crps, ["Unknown ID", "Unknown ID"])
    StringAnalysis.publishers!(crps, ["Unknown Publisher", "Unknown Publisher"])
    StringAnalysis.published_years!(crps, ["Unknown Publishing Year", "Unknown Publishing Year"])
    StringAnalysis.edition_years!(crps, ["Unknown Edition Year", "Unknown Edition Year"])
    StringAnalysis.documenttypes!(crps, ["Unknown Type", "Unknown Type"])
    StringAnalysis.notes!(crps, ["A Note", "Another Note"])
    @test isequal(StringAnalysis.names(crps), ["Unnamed Document", "Unnamed Document"])
    @test isequal(StringAnalysis.languages(crps), [Languages.English(), Languages.English()])
    @test isequal(StringAnalysis.authors(crps), ["Unknown Author", "Unknown Author"])
    @test isequal(StringAnalysis.timestamps(crps), ["Unknown Time", "Unknown Time"])
    @test isequal(StringAnalysis.ids(crps), ["Unknown ID", "Unknown ID"])
    @test isequal(StringAnalysis.publishers(crps), ["Unknown Publisher", "Unknown Publisher"])
    @test isequal(StringAnalysis.published_years(crps), ["Unknown Publishing Year", "Unknown Publishing Year"])
    @test isequal(StringAnalysis.edition_years(crps), ["Unknown Edition Year", "Unknown Edition Year"])
    @test isequal(StringAnalysis.documenttypes(crps), ["Unknown Type", "Unknown Type"])
    @test isequal(StringAnalysis.notes(crps), ["A Note", "Another Note"])
end
